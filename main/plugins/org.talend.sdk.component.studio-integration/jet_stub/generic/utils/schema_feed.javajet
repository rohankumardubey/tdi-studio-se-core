<%/*
  Copyright (C) 2006-2022 Talend Inc. - www.talend.com
   Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/%>

final org.talend.sdk.component.runtime.manager.ComponentManager mgrt_<%=cid%> = org.talend.sdk.component.runtime.manager.ComponentManager.instance();
if (mgrt_<%=cid%>.getContainer().findAll().isEmpty()) {
    mgrt_<%=cid%>.autoDiscoverPlugins(false, true);
}
final java.util.Map<Class<?>, Object> svc_<%=cid%> = mgr_<%=cid%>.findPlugin(mapper_<%=cid%>.plugin()).get().get(org.talend.sdk.component.runtime.manager.ComponentManager.AllServices.class).getServices();
final org.talend.sdk.component.api.service.record.RecordBuilderFactory rbf_<%=cid%> = org.talend.sdk.component.api.service.record.RecordBuilderFactory.class.cast(svc_<%=cid%>.get(org.talend.sdk.component.api.service.record.RecordBuilderFactory.class));

org.talend.sdk.component.api.record.Schema.Builder builder_<%=cid%> = rbf_<%=cid%>.newSchemaBuilder(org.talend.sdk.component.api.record.Schema.Type.RECORD);
org.talend.sdk.component.api.record.Schema incomingSchema_<%=cid%> = builder_<%=cid%>
<%
java.util.Map<String, String> typeMappings = new java.util.HashMap<String, String>() {
{
    put("id_List"       , "org.talend.sdk.component.api.record.Schema.Type.ARRAY");
    put("id_Boolean"    , "org.talend.sdk.component.api.record.Schema.Type.BOOLEAN");
    put("id_Byte"       , "org.talend.sdk.component.api.record.Schema.Type.BYTES");
    put("id_Date"       , "org.talend.sdk.component.api.record.Schema.Type.DATETIME");
    // we should use at least component-runtime 1.49 for id_BigDecimal
    put("id_BigDecimal" , "org.talend.sdk.component.api.record.Schema.Type.DECIMAL");
    put("id_Double"     , "org.talend.sdk.component.api.record.Schema.Type.DOUBLE");
    put("id_Float"      , "org.talend.sdk.component.api.record.Schema.Type.FLOAT");
    put("id_Integer"    , "org.talend.sdk.component.api.record.Schema.Type.INT");
    put("id_Long"       , "org.talend.sdk.component.api.record.Schema.Type.LONG");
    put("id_Object"     , "org.talend.sdk.component.api.record.Schema.Type.RECORD");
    put("id_String"     , "org.talend.sdk.component.api.record.Schema.Type.STRING");
}};

for (IMetadataColumn col: input_columnList){
    String label = col.getLabel();
    String rawname = col.getOriginalDbColumnName();
    String ttype = col.getTalendType();
    String comment = col.getComment();
    String pattern = col.getPattern();
    Integer precision = col.getPrecision();
    Integer length = col.getLength();
    String id = col.getId();
    String dft = col.getDefault();
    Boolean nil = col.isNullable();
    Boolean key=  col.isKey();
    String sdkType = typeMappings.get(ttype);
    //
    // TODO handle id_Dynamic columns
    //
%>
.withEntry(rbf_<%=cid%>.newEntryBuilder().withName("<%=label%>").withType(<%=sdkType%>).withNullable(<%=nil%>)
<%
if (rawname != null){
%>
.withRawName("<%=rawname%>")
<%
}
if (comment != null && !comment.isEmpty()){
%>
.withComment("<%=comment%>")
<%
}
if (dft != null){
%>
.withDefaultValue("<%=dft%>")
<%
}
%>
.withProp("talend.studio.type", "<%=ttype%>")
<%
if (key) {
%>
.withProp("talend.studio.key", "true")
<%
}
if (precision != null) {
%>
.withProp("talend.studio.precision", "<%=precision%>")
<%
}
if (length != null) {
%>
.withProp("talend.studio.length", "<%=length%>")
<%
}
if (pattern != null && !pattern.isEmpty()) {
%>
.withProp("talend.studio.pattern", <%=pattern%>)
<%
}
%>
.build())
<% } %>
.build();
